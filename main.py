import asyncio
import os
from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.client.session.aiohttp import AiohttpSession
from dotenv import load_dotenv, find_dotenv

from common.bot_cmds_list import private
from middlewares.db import DataBaseSession
from database.engine import create_db, drop_db, session_maker
from aiohttp import web

# –ó–∞–≥—Ä—É–∑–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv(find_dotenv())

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
from handlers.admin_panel.admin_start_functions import admin_start_functions_private_router
from handlers.admin_panel.send_mesage import send_message_private_router
from handlers.group_panel.user_group_private import user_group_router
from handlers.user_panel.recommendations_functions import recommendations_private_router
from handlers.user_panel.review_functions import review_private_router
from handlers.user_panel.search import search_private_router
from handlers.user_panel.start_functions import start_functions_private_router
from handlers.user_panel.unknown_functions import unknown_private_router

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ ID –≥—Ä—É–ø–ø—ã
TOKEN = os.getenv('TOKEN')
GROUP_ID = os.getenv('group_id')

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
session = AiohttpSession(proxy="http://proxy.server:3128")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
bot.my_admins_list = []
bot.group_id = GROUP_ID

dp = Dispatcher()

# –í–∫–ª—é—á–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(start_functions_private_router)
dp.include_router(admin_start_functions_private_router)
dp.include_router(send_message_private_router)
dp.include_router(search_private_router)
dp.include_router(review_private_router)
dp.include_router(recommendations_private_router)
dp.include_router(user_group_router)
dp.include_router(unknown_private_router)

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
async def on_startup():
    run_param = False  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è –¥—Ä–æ–ø–∞ –±–∞–∑—ã
    if run_param:
        await drop_db()  # –£–¥–∞–ª–µ–Ω–∏–µ –ë–î
    await create_db()    # –°–æ–∑–¥–∞–Ω–∏–µ –ë–î
    print("–°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω! üòä –ü—Ä–∏–≤–µ—Ç, –±–æ—Å—Å!")

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ
async def on_shutdown():
    print("–°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. üòî –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –±–æ—Å—Å!")

# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤
async def handle_webhook(request):
    request_body = await request.text()
    update = types.Update(**request.json())  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞ –≤ –æ–±—ä–µ–∫—Ç Update
    await dp.feed_update(bot, update)
    return web.Response()

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    dp.startup.register(on_startup)
    dp.shutdown.register(on_shutdown)

    # –î–æ–±–∞–≤–ª—è–µ–º middleware –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
    dp.update.middleware(DataBaseSession(session_pool=session_maker))

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫
    webhook_url = "https://cinemahub2024-tgbot.onrender.com/webhook"
    await bot.set_webhook(url=webhook_url)

    # –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–µ
    await bot.delete_my_commands(scope=types.BotCommandScopeAllPrivateChats())
    await bot.set_my_commands(commands=private, scope=types.BotCommandScopeAllPrivateChats())

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏—ë–º–∞ –≤–µ–±—Ö—É–∫–æ–≤
    app = web.Application()
    app.router.add_post('/webhook', handle_webhook)

    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç Render
    port = int(os.environ.get('PORT', 3000))
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()

    print(f"–°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")

    # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏–π
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())